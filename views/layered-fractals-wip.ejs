
<%- include('partials/bodytop.ejs') %>
<script id="shader-vs" type="x-shader/x-vertex"> 
 
  attribute vec3 aPos;
  attribute vec2 aTexCoord;
  varying   vec2 pixel;
void main(void) {
   gl_Position = vec4(aPos, 1.);
   pixel = aTexCoord;
}
</script>

<script id="shader-fs-blur-horizontal" type="x-shader/x-fragment"> 
#ifdef GL_ES
precision highp float;
#endif
// original shader from http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
// horizontal blur fragment shader
uniform sampler2D src_tex;
varying vec2 pixel;
uniform vec2 pixelSize;
void main(void) // fragment
{
	float h = pixelSize.x;
	vec4 sum = vec4(0.0);
	sum += texture2D(src_tex, vec2(pixel.x - 4.0*h, pixel.y) ) * 0.05;
	sum += texture2D(src_tex, vec2(pixel.x - 3.0*h, pixel.y) ) * 0.09;
	sum += texture2D(src_tex, vec2(pixel.x - 2.0*h, pixel.y) ) * 0.12;
	sum += texture2D(src_tex, vec2(pixel.x - 1.0*h, pixel.y) ) * 0.15;
	sum += texture2D(src_tex, vec2(pixel.x + 0.0*h, pixel.y) ) * 0.16;
	sum += texture2D(src_tex, vec2(pixel.x + 1.0*h, pixel.y) ) * 0.15;
	sum += texture2D(src_tex, vec2(pixel.x + 2.0*h, pixel.y) ) * 0.12;
	sum += texture2D(src_tex, vec2(pixel.x + 3.0*h, pixel.y) ) * 0.09;
	sum += texture2D(src_tex, vec2(pixel.x + 4.0*h, pixel.y) ) * 0.05;
    gl_FragColor.xyz = sum.xyz/0.98; // normalize
	gl_FragColor.a = 1.;
} 
</script>

<script id="shader-fs-blur-vertical" type="x-shader/x-fragment"> 
#ifdef GL_ES
precision highp float;
#endif
// original shader from http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
// vertical blur fragment shader
uniform sampler2D src_tex;
varying vec2 pixel;
uniform vec2 pixelSize;
void main(void) // fragment
{
	float v = pixelSize.y;
	vec4 sum = vec4(0.0);
	sum += texture2D(src_tex, vec2(pixel.x, - 4.0*v + pixel.y) ) * 0.05;
	sum += texture2D(src_tex, vec2(pixel.x, - 3.0*v + pixel.y) ) * 0.09;
	sum += texture2D(src_tex, vec2(pixel.x, - 2.0*v + pixel.y) ) * 0.12;
	sum += texture2D(src_tex, vec2(pixel.x, - 1.0*v + pixel.y) ) * 0.15;
	sum += texture2D(src_tex, vec2(pixel.x, + 0.0*v + pixel.y) ) * 0.16;
	sum += texture2D(src_tex, vec2(pixel.x, + 1.0*v + pixel.y) ) * 0.15;
	sum += texture2D(src_tex, vec2(pixel.x, + 2.0*v + pixel.y) ) * 0.12;
	sum += texture2D(src_tex, vec2(pixel.x, + 3.0*v + pixel.y) ) * 0.09;
	sum += texture2D(src_tex, vec2(pixel.x, + 4.0*v + pixel.y) ) * 0.05;
    gl_FragColor.xyz = sum.xyz/0.98;
	gl_FragColor.a = 1.;
}
</script>

<script id="shader-fs-advance" type="x-shader/x-fragment"> 
#ifdef GL_ES
precision highp float;
#endif
 
	uniform sampler2D sampler_prev;
	uniform sampler2D sampler_prev_n;
	uniform vec2 aspect;
	uniform sampler2D sampler_blur;
	uniform sampler2D sampler_blur2;
	uniform sampler2D sampler_blur3;
	uniform sampler2D sampler_blur4;
	uniform sampler2D sampler_noise;
	uniform sampler2D sampler_noise_n;
 
	varying vec2 pixel;
	uniform vec2 pixelSize;
	uniform vec4 rnd;
	uniform vec2 mouse;
	uniform vec2 rot2d;
	uniform float time;
	uniform float fps;
 
bool is_onscreen(vec2 uv){
	return (uv.x < 1.) && (uv.x > 0.) && (uv.y < 1.) && (uv.y > 0.);
}

float border(vec2 domain, float thickness){
   vec2 uv = fract(domain-vec2(0.5));
   uv = min(uv,1.-uv)*2.;
   return clamp(max(uv.x,uv.y)-1.+thickness,0.,1.)/(thickness);
}

vec2 complex_mul(vec2 factorA, vec2 factorB){
   return vec2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
}

vec2 complex_div(vec2 numerator, vec2 denominator){
   return vec2( numerator.x*denominator.x + numerator.y*denominator.y,
                numerator.y*denominator.x - numerator.x*denominator.y)/
          vec2(denominator.x*denominator.x + denominator.y*denominator.y);
}

vec2 uv_torus_mirror(vec2 domain){
	return vec2(1.0) - abs( fract( domain * vec2(0.5) ) * vec2(2.0) - vec2(1.0) );
}

void main(void) {
	// traveling wavefronts in the red channel
	vec2 d = pixelSize*4.;
	vec4 dx = (texture2D(sampler_blur, pixel + vec2(1,0)*d) - texture2D(sampler_blur, pixel - vec2(1,0)*d))*0.5;
	vec4 dy = (texture2D(sampler_blur, pixel + vec2(0,1)*d) - texture2D(sampler_blur, pixel - vec2(0,1)*d))*0.5;
	
	vec2 zoom_in = pixel + vec2(dx.x,dy.x)*pixelSize*8.; // adding the traveling wave front
	vec2 rand_noise = texture2D(sampler_noise, zoom_in + vec2(rnd.x, rnd.y)).xy;
	gl_FragColor.x = texture2D(sampler_prev, zoom_in).x + (rand_noise.x-0.5)*0.0025 - 0.002; // decay with error diffusion
	gl_FragColor.x -= (texture2D(sampler_blur, zoom_in + (rand_noise-0.5)*pixelSize).x -
					  texture2D(sampler_prev, zoom_in + (rand_noise-0.5)*pixelSize)).x*0.047; // reaction-diffusion

	// Julia Fractal in the green channel: 
 
	vec2 c = vec2(-0.18, -0.18) + (mouse.yx-0.5)*vec2(0.02,-0.055)*0.;
	vec2 tuning =  vec2(1.7) - (mouse.y-0.5)*0.03*0.;
	vec2 complexSquaredPlusC; // One steps towards the Julia Attractor
	vec2 uv = (pixel - vec2(0.5))*tuning;
	complexSquaredPlusC.x = (uv.x * uv.x - uv.y * uv.y + c.x + 0.5);
	complexSquaredPlusC.y = (2. * uv.x * uv.y + c.y + 0.5);
	
	if(is_onscreen(complexSquaredPlusC)){
		float old = texture2D(sampler_prev, complexSquaredPlusC).y;
		gl_FragColor.y = old + 0.004;
	}else{
		// return border color
		gl_FragColor.y = 0.;
		
	}

	// "galaxy" fractal in the blue channel (not yet, not quite - this is a work in progress)

	gl_FragColor.z = clamp(1.-length(pixel-vec2(.5))*8.,0.,1.);
	float scale = mouse.y*8.0 + 2.0;
	uv = complex_div(vec2(1,0), complex_mul(pixel-vec2(0.5), rot2d*scale));  
	uv = uv_torus_mirror(uv);
	 
	gl_FragColor.z = mix(gl_FragColor.z,1.,clamp(1.-length(uv-vec2(.5))*4.,0.,1.));
	gl_FragColor.z = mix(gl_FragColor.z,1.,texture2D(sampler_prev,uv).z*0.99); // we are the 99%! go blur out 1% ;)

	gl_FragColor.a = 1.;
}
</script>

<script id="shader-fs-composite" type="x-shader/x-fragment"> 
#ifdef GL_ES
precision highp float;
#endif
 
	uniform sampler2D sampler_prev;
	uniform sampler2D sampler_prev_n;
	uniform sampler2D sampler_blur;
	uniform sampler2D sampler_blur2;
	uniform sampler2D sampler_blur3;
	uniform sampler2D sampler_blur4;
	uniform sampler2D sampler_noise;
	uniform sampler2D sampler_noise_n;
 
	varying vec2 pixel;
	uniform vec2 pixelSize;
	uniform vec2 aspect;
	uniform vec4 rnd;
	uniform vec2 mouse;
	uniform vec2 rot2d;
	uniform float time;
	uniform float fps;
	uniform float z;
	uniform float dz;
	uniform float w;
	uniform float dw;
 
#define pi 3.141592653589793238462643383279
#define pi_inv 0.318309886183790671537767526745
#define pi2_inv 0.159154943091895335768883763372
 
float border(vec2 domain, float thickness){
   vec2 uv = fract(domain-vec2(0.5));
   uv = min(uv,1.-uv)*2.;
   return clamp(max(uv.x,uv.y)-1.+thickness,0.,1.)/(thickness);
}
 
float square_mask(vec2 domain){
	return (domain.x <= 1. && domain.x >= 0. && domain.y <= 1. && domain.y >= 0.) ? 1. : 0.; 
}
 
vec2 complex_mul(vec2 factorA, vec2 factorB){
   return vec2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
}

vec2 spiralzoom(vec2 domain, vec2 center, float n, float spiral_factor, float zoom_factor, vec2 pos){
	vec2 uv = domain - center;
	float d = length(uv);
	return vec2( atan(uv.y, uv.x)*n*pi2_inv + d*spiral_factor, -log(d)*zoom_factor) + pos;
}
 
void main(void) {
	//vec2 uv = spiralzoom( pixel, vec2(0.5), 4.0, -dw*32.*0.2, 0.65 + 3.*dz*0.2, vec2(w*0.2 + dw*16.*0.2, z*0.2 - 2.5*dz*0.2) );
	vec2 uv = spiralzoom( pixel, vec2(0.5), 2.0, -dw*6.5, 0.36 + dz*0.6, vec2(w*0.2 + dw*3.2, z*0.2 - dz*0.5) );
	vec2 lightSize=vec2(4.);
 
	// grabbing the blurred gradients
	vec2 d = pixelSize*2.;
	vec4 dx = (texture2D(sampler_blur, uv + vec2(1,0)*d) - texture2D(sampler_blur, uv - vec2(1,0)*d))*0.5;
	vec4 dy = (texture2D(sampler_blur, uv + vec2(0,1)*d) - texture2D(sampler_blur, uv - vec2(0,1)*d))*0.5;
 
	// adding the pixel gradients
	d = pixelSize*1.;
	dx += texture2D(sampler_prev, uv + vec2(1,0)*d) - texture2D(sampler_prev, uv - vec2(1,0)*d);
	dy += texture2D(sampler_prev, uv + vec2(0,1)*d) - texture2D(sampler_prev, uv - vec2(0,1)*d);
 
	vec2 displacement = vec2(dx.x,dy.x)*lightSize; // using only the red gradient as displacement vector
	float light = pow(max(1.-distance(0.5+(pixel-0.5)*aspect*lightSize + displacement,0.5+(mouse-0.5)*aspect*lightSize),0.),4.);
 
	// recoloring the lit up red channel
	vec4 rd = vec4(texture2D(sampler_prev,uv+vec2(dx.x,dy.x)*pixelSize*8.).x)*vec4(0.7,1.5,2.0,1.0)-vec4(0.3,1.0,1.0,1.0);
	gl_FragColor = mix(rd,vec4(8.0,6.,2.,1.), light*0.75*vec4(1.-texture2D(sampler_prev,uv+vec2(dx.x,dy.x)*pixelSize*8.).x)); 
	
	//gl_FragColor = mix(gl_FragColor,vec4(3),(1.-vec4(1.-border(uv,0.025)))*0.26);

	//gl_FragColor = texture2D(sampler_prev, pixel); // bypass

	gl_FragColor = mix(gl_FragColor, vec4(1.5),vec4(pow(texture2D(sampler_prev, pixel).z*0.85,4.)));
	gl_FragColor *= vec4(1.-texture2D(sampler_prev, pixel).y*1.25);
	//gl_FragColor = vec4(texture2D(sampler_prev, pixel).z); // blue channel
	gl_FragColor.a = 1.;
}
</script>

<script id="shader-fs-copy" type="x-shader/x-fragment"> 
#ifdef GL_ES
precision highp float;
#endif
	uniform sampler2D sampler_prev;
	varying vec2 pixel;
void main(void) {
	gl_FragColor = texture2D(sampler_prev, pixel);
	gl_FragColor.a = 1.;
}
</script>
<script src="js/Timer.js" type="text/javascript">
</script>
<script type="text/javascript">
	function getShader(gl, id) {
		var shaderScript = document.getElementById(id);
		var str = "";
		var k = shaderScript.firstChild;
		while (k) {
			if (k.nodeType == 3)
				str += k.textContent;
			k = k.nextSibling;
		}
		var shader;
		if (shaderScript.type == "x-shader/x-fragment")
			shader = gl.createShader(gl.FRAGMENT_SHADER);
		else if (shaderScript.type == "x-shader/x-vertex")
			shader = gl.createShader(gl.VERTEX_SHADER);
		else
			return null;
		gl.shaderSource(shader, str);
		gl.compileShader(shader);
		if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) == 0)
			alert(gl.getShaderInfoLog(shader));
		return shader;
	}

	requestAnimFrame = (function() {
		return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback, element) {
			setTimeout(callback, 1000 / 60);
		};
	})();

	var gl;
	var prog_copy;
	var prog_advance;
	var prog_composite;
	var prog_blur_horizontal;
	var prog_blur_vertical;
	var FBO_main;
	var FBO_main2;
	var FBO_noise;
	var FBO_blur;
	var FBO_blur2;
	var FBO_blur3;
	var FBO_blur4;
	var FBO_helper;
	var FBO_helper2;
	var FBO_helper3;
	var FBO_helper4;
	var texture_main_l; // main, linear
	var texture_main_n; // main, nearest (accurate pixel access on the same buffer)
	var texture_main2_l; // main double buffer, linear
	var texture_main2_n; // main double buffer, nearest (accurate pixel access on the same buffer)
	var texture_helper; // needed for multi-pass shader programs (2-pass Gaussian blur)
	var texture_helper2; // (1/4 resolution )
	var texture_helper3; // (1/16 resolution )
	var texture_helper4; // (1/256 resolution )
	var texture_blur; // full resolution blur result
	var texture_blur2; // double blur
	var texture_blur3; // quad blur
	var texture_blur4; // really low resolution - use wisely ^^
	var texture_noise_n; // noise pixel accurate
	var texture_noise_l; // noise interpolated pixel access

	var halted = false;
	var delay = 3;
	var it = 1;
	var frames = 0;
	var fps = 60;
	var time = 0;
	var mouseX = 0.5;
	var mouseY = 0.5;
	var animation;
	var frTimer; // frame rate display update timer
	// texture size (must be powers of two, remember 2048x1024 flat could also be a 128x128x128 voxel)
	var sizeX = 1024;
	var sizeY = 1024; // 2048x1024 flat or 128x128x128 cube
	// viewport size
	var viewX = 1024;
	var viewY = 1024;

	var timer = new Timer(); // mrdoob's music timer

	function load() {
		clearInterval(frTimer);
		timer.play();
		var c = document.getElementById("c");
		try {
			gl = c.getContext("experimental-webgl", { depth : false });
		} catch (e) {
		}
		if (!gl) {
			alert("Your browser does not support WebGL");
			return;
		}
		document.onmousemove = function(evt) {
			mouseX = evt.pageX / viewX;
			mouseY = 1 - evt.pageY / viewY;

		};
		document.onclick = function(evt) {
			halted = !halted;
		};
		c.width = viewX;
		c.height = viewY;

		prog_copy = gl.createProgram();
		gl.attachShader(prog_copy, getShader(gl, "shader-vs"));
		gl.attachShader(prog_copy, getShader(gl, "shader-fs-copy"));
		gl.linkProgram(prog_copy);

		prog_advance = gl.createProgram();
		gl.attachShader(prog_advance, getShader(gl, "shader-vs"));
		gl.attachShader(prog_advance, getShader(gl, "shader-fs-advance"));
		gl.linkProgram(prog_advance);

		prog_composite = gl.createProgram();
		gl.attachShader(prog_composite, getShader(gl, "shader-vs"));
		gl.attachShader(prog_composite, getShader(gl, "shader-fs-composite"));
		gl.linkProgram(prog_composite);

		prog_blur_horizontal = gl.createProgram();
		gl.attachShader(prog_blur_horizontal, getShader(gl, "shader-vs"));
		gl.attachShader(prog_blur_horizontal, getShader(gl, "shader-fs-blur-horizontal"));
		gl.linkProgram(prog_blur_horizontal);

		prog_blur_vertical = gl.createProgram();
		gl.attachShader(prog_blur_vertical, getShader(gl, "shader-vs"));
		gl.attachShader(prog_blur_vertical, getShader(gl, "shader-fs-blur-vertical"));
		gl.linkProgram(prog_blur_vertical);

		var posBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, posBuffer);

		var vertices = new Float32Array([ -1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0 ]);

		var aPosLoc = gl.getAttribLocation(prog_advance, "aPos");
		gl.enableVertexAttribArray(aPosLoc);

		var aTexLoc = gl.getAttribLocation(prog_advance, "aTexCoord");
		gl.enableVertexAttribArray(aTexLoc);

		var texCoords = new Float32Array([ 0, 0, 1, 0, 0, 1, 1, 1 ]);

		var texCoordOffset = vertices.byteLength;

		gl.bufferData(gl.ARRAY_BUFFER, texCoordOffset + texCoords.byteLength, gl.STATIC_DRAW);
		gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
		gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);
		gl.vertexAttribPointer(aPosLoc, 3, gl.FLOAT, gl.FALSE, 0, 0);
		gl.vertexAttribPointer(aTexLoc, 2, gl.FLOAT, gl.FALSE, 0, texCoordOffset);

		var noisepixels = [];
		var pixels = [];
		for ( var i = 0; i < sizeX; i++) {
			for ( var j = 0; j < sizeY; j++) {
				noisepixels.push(Math.random() * 255, Math.random() * 255, Math.random() * 255, 255);
				pixels.push(0, 0, 0, 255);
			}
		}
		var pixels2 = [];
		for ( var i = 0; i < sizeX / 2; i++) {
			for ( var j = 0; j < sizeY / 2; j++) {
				pixels2.push(0, 0, 0, 255);
			}
		}
		var pixels3 = [];
		for ( var i = 0; i < sizeX / 4; i++) {
			for ( var j = 0; j < sizeY / 4; j++) {
				pixels3.push(0, 0, 0, 255);
			}
		}
		var pixels4 = [];
		for ( var i = 0; i < sizeX / 8; i++) {
			for ( var j = 0; j < sizeY / 8; j++) {
				pixels4.push(0, 0, 0, 255);
			}
		}

		var rawData = new Uint8Array(noisepixels);
		texture_main_l = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_main_l);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX, sizeY, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(noisepixels);
		texture_main_n = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_main_n);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX, sizeY, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

		rawData = new Uint8Array(noisepixels);
		texture_main2_l = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_main2_l);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX, sizeY, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(noisepixels);
		texture_main2_n = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_main2_n);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX, sizeY, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

		rawData = new Uint8Array(pixels);
		texture_helper = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_helper);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX, sizeY, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(pixels2);
		texture_helper2 = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_helper2);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX / 2, sizeY / 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(pixels3);
		texture_helper3 = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_helper3);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX / 4, sizeY / 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(pixels4);
		texture_helper4 = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_helper4);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX / 8, sizeY / 8, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(pixels);
		texture_blur = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_blur);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX, sizeY, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(pixels2);
		texture_blur2 = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_blur2);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX / 2, sizeY / 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(pixels3);
		texture_blur3 = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_blur3);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX / 4, sizeY / 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(pixels4);
		texture_blur4 = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_blur4);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX / 8, sizeY / 8, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		rawData = new Uint8Array(noisepixels);
		texture_noise_l = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_noise_l);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX, sizeY, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

		texture_noise_n = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, texture_noise_n);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sizeX, sizeY, 0, gl.RGBA, gl.UNSIGNED_BYTE, rawData);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

		FBO_main = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_main);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_main_l, 0);

		FBO_main2 = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_main2);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_main2_l, 0);

		FBO_helper = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_helper, 0);

		FBO_helper2 = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper2);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_helper2, 0);

		FBO_helper3 = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper3);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_helper3, 0);

		FBO_helper4 = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper4);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_helper4, 0);

		FBO_blur = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_blur, 0);

		FBO_blur2 = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur2);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_blur2, 0);

		FBO_blur3 = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur3);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_blur3, 0);

		FBO_blur4 = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur4);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_blur4, 0);

		FBO_noise = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_noise);
		gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture_noise_l, 0);

		gl.activeTexture(gl.TEXTURE2);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur);

		gl.activeTexture(gl.TEXTURE3);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur2);

		gl.activeTexture(gl.TEXTURE4);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur3);

		gl.activeTexture(gl.TEXTURE5);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur4);

		gl.activeTexture(gl.TEXTURE6);
		gl.bindTexture(gl.TEXTURE_2D, texture_noise_l);

		gl.activeTexture(gl.TEXTURE7);
		gl.bindTexture(gl.TEXTURE_2D, texture_noise_n);

		calculateBlurTexture();

		posX1 = 0.5;
		posY1 = 0.4;
		scale1 = 1 / 0.5;
		var w1 = 0;
		sinW1 = Math.sin(w1);
		cosW1 = Math.cos(w1);

		posX2 = 0.5;
		posY2 = 0.55;
		scale2 = 1 / 0.85;
		var w2 = 0.1;
		w2 *= Math.PI;
		sinW2 = Math.sin(w2);
		cosW2 = Math.cos(w2);

		frTimer = setInterval(fr, 500);
		time = new Date().getTime();
		animation = "animate";
		anim();
	}

	var oldmouseX, oldmouseY;
	var z = 0;
	var dz = 0;
	var w = 0;
	var dw = 0;
	function physics() {
		var dx = mouseX - oldmouseX;
		var dy = mouseY - oldmouseY;

		if (!isNaN(dy)) {
		}

		if (!isNaN(dx)) {
		}
		
		w = (mouseX-0.5)*Math.PI;

		oldmouseX = mouseX;
		oldmouseY = mouseY;
	}
	
	function setUniforms(program) {
		gl.uniform2f(gl.getUniformLocation(program, "pixelSize"), 1. / sizeX, 1. / sizeY);
		gl.uniform4f(gl.getUniformLocation(program, "rnd"), Math.random(), Math.random(), Math.random(), Math.random());
		gl.uniform1f(gl.getUniformLocation(program, "fps"), fps);
		gl.uniform1f(gl.getUniformLocation(program, "time"), timer.currentTime);
		gl.uniform2f(gl.getUniformLocation(program, "aspect"), Math.max(1, viewX / viewY), Math.max(1, viewY / viewX));
		gl.uniform2f(gl.getUniformLocation(program, "mouse"), mouseX, mouseY);
		gl.uniform1i(gl.getUniformLocation(program, "sampler_prev"), 0);
		gl.uniform1i(gl.getUniformLocation(program, "sampler_prev_n"), 1);
		gl.uniform1i(gl.getUniformLocation(program, "sampler_blur"), 2);
		gl.uniform1i(gl.getUniformLocation(program, "sampler_blur2"), 3);
		gl.uniform1i(gl.getUniformLocation(program, "sampler_blur3"), 4);
		gl.uniform1i(gl.getUniformLocation(program, "sampler_blur4"), 5);
		gl.uniform1i(gl.getUniformLocation(program, "sampler_noise"), 6);
		gl.uniform1i(gl.getUniformLocation(program, "sampler_noise_n"), 7);

		w = (mouseX-0.5)*Math.PI;
		gl.uniform2f(gl.getUniformLocation(program, "rot2d"), Math.cos(w), Math.sin(w));
	}
	function calculateBlurTexture() {
		// simple blur

		// horizontal
		gl.viewport(0, 0, sizeX, sizeY);
		gl.useProgram(prog_blur_horizontal);
		gl.uniform2f(gl.getUniformLocation(prog_blur_horizontal, "pixelSize"), 1. / sizeX, 1. / sizeY);
		gl.activeTexture(gl.TEXTURE0);
		if (it < 0) {
			gl.bindTexture(gl.TEXTURE_2D, texture_main2_l);
			gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper);
		} else {
			gl.bindTexture(gl.TEXTURE_2D, texture_main_l);
			gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper);
		}
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// vertical
		gl.viewport(0, 0, sizeX, sizeY);
		gl.useProgram(prog_blur_vertical);
		gl.uniform2f(gl.getUniformLocation(prog_blur_vertical, "pixelSize"), 1. / sizeX, 1. / sizeY);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_helper);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// double blur
		// copy previous blur level to lower resolution texture
		gl.viewport(0, 0, sizeX / 2, sizeY / 2);
		gl.useProgram(prog_copy);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur2);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// blur2 vertical
		gl.viewport(0, 0, sizeX / 2, sizeY / 2);
		gl.useProgram(prog_blur_vertical);
		gl.uniform2f(gl.getUniformLocation(prog_blur_vertical, "pixelSize"), 2. / sizeX, 2. / sizeY);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur2);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper2);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// blur2 horizontal
		gl.viewport(0, 0, sizeX / 2, sizeY / 2);
		gl.useProgram(prog_blur_horizontal);
		gl.uniform2f(gl.getUniformLocation(prog_blur_horizontal, "pixelSize"), 2. / sizeX, 2. / sizeY);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_helper2);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur2);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// blur3
		// copy previous blur level to lower resolution texture
		gl.viewport(0, 0, sizeX / 4, sizeY / 4);
		gl.useProgram(prog_copy);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur2);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur3);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// blur3 vertical
		gl.viewport(0, 0, sizeX / 4, sizeY / 4);
		gl.useProgram(prog_blur_vertical);
		gl.uniform2f(gl.getUniformLocation(prog_blur_vertical, "pixelSize"), 4. / sizeX, 4. / sizeY);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur3);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper3);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// blur3 horizontal
		gl.viewport(0, 0, sizeX / 4, sizeY / 4);
		gl.useProgram(prog_blur_horizontal);
		gl.uniform2f(gl.getUniformLocation(prog_blur_horizontal, "pixelSize"), 4. / sizeX, 4. / sizeY);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_helper3);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur3);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// blur4
		// copy previous blur level to lower resolution texture
		gl.viewport(0, 0, sizeX / 8, sizeY / 8);
		gl.useProgram(prog_copy);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur3);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur4);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// blur4 vertical
		gl.viewport(0, 0, sizeX / 8, sizeY / 8);
		gl.useProgram(prog_blur_vertical);
		gl.uniform2f(gl.getUniformLocation(prog_blur_vertical, "pixelSize"), 8. / sizeX, 8. / sizeY);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_blur4);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_helper4);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		// blur4 horizontal
		gl.viewport(0, 0, sizeX / 8, sizeY / 8);
		gl.useProgram(prog_blur_horizontal);
		gl.uniform2f(gl.getUniformLocation(prog_blur_horizontal, "pixelSize"), 8. / sizeX, 8. / sizeY);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture_helper4);
		gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_blur4);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

	}

	function advance() {
		physics();
		gl.viewport(0, 0, sizeX, sizeY);
		gl.useProgram(prog_advance);
		setUniforms(prog_advance);
		if (it > 0) {
			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D, texture_main_l); // interpolated input
			gl.activeTexture(gl.TEXTURE1);
			gl.bindTexture(gl.TEXTURE_2D, texture_main_n); // "nearest" input
			gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_main2); // write to buffer
		} else {
			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D, texture_main2_l); // interpolated
			gl.activeTexture(gl.TEXTURE1);
			gl.bindTexture(gl.TEXTURE_2D, texture_main2_n); // "nearest"
			gl.bindFramebuffer(gl.FRAMEBUFFER, FBO_main); // write to buffer
		}
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();

		calculateBlurTexture();
		it = -it;
	}

	function composite() {
		gl.viewport(0, 0, viewX, viewY);
		gl.useProgram(prog_composite);
		setUniforms(prog_composite);
		if (it < 0) {
			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D, texture_main_l);
			gl.activeTexture(gl.TEXTURE1);
			gl.bindTexture(gl.TEXTURE_2D, texture_main_n);
		} else {
			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D, texture_main2_l);
			gl.activeTexture(gl.TEXTURE1);
			gl.bindTexture(gl.TEXTURE_2D, texture_main2_n);
		}
		gl.bindFramebuffer(gl.FRAMEBUFFER, null);
		gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
		gl.flush();
		frames++;
	}

	function anim() {
		if (!halted)
			advance();
		composite();
		switch (animation) {
		case "animate":
			setTimeout("requestAnimFrame(anim)", delay);
			break;
		case "reset":
			load();
			break;
		}
	}
	function setDelay(v) {
		delay = parseInt(v);
	}
	function fr() {
		var ti = new Date().getTime();
		fps = Math.round(1000 * frames / (ti - time));
		document.getElementById("fps").textContent = fps;
		frames = 0;
		time = ti;
	}
</script>
<style type="text/css">
body {
	background-color: #000000;
	color: #FFFFFF;
	text-shadow: #000000;
}

a {
	color: #CCCCCC;
}

#c {
	position: absolute;
	top: 0;
	left: 0;
	z-index: -1;
}

#desc {
	background-color: rgba(0, 0, 0, 0.2);
}
</style>
</head>
<body onload="load()">
	<div id="desc">
		Fps: <span id="fps"></span>

		<p />
		Mashup of <a href="traveling-wavefronts-lit-up.html">traveling wavefronts</a>, <a href="progressive-fractal.html">progressive
			Julia fractal</a><br /> and <a href="grassroots.html">grassroots complex polynomials</a>
	</div>
	<canvas id="c"></canvas>
</body>
</html>
